/**
 * Author: Alwyn Malachi Berkeley Jr.
 * Created: 4/11/09
 * Panther ID: 1513078
 * Description: This program was written to solve the Numerical
 * Analysis challenge question.
 */

import java.util.ArrayList;

import javax.swing.JOptionPane;

/**
 * The main class that used to run the program and holds most of
 * the program's logic.
 */
public class Main {
	private int original_matrix_size;
	private ArrayList<Integer> coeffList; // perhaps this should be a stack
	private String outputFile;
	String heading;
	ArrayList<Integer> originalMatrix;
	
	// temporary containers used in the determinant function
	private StringBuffer detPart1;
	private StringBuffer detPart2;
	
	public Main(int passed_matrix_size) {
		// notify state
		System.out.println("Parsing/Initializing needed variables...");
		
		// needed variables
		original_matrix_size = (passed_matrix_size != 0) ? passed_matrix_size : Integer.parseInt(JOptionPane.showInputDialog(null, "What is the size of the initial matrix? (Enter a number between 3 to 10)")); // matrix size
		outputFile = "./" + original_matrix_size + "x" + original_matrix_size + ".tex";
		
		// notify state
		System.out.println("Generating the original " + original_matrix_size + "x" + original_matrix_size + " matrix...");
		
		// create original matrix list and put the original matrix inside
		originalMatrix = generateMatrix(original_matrix_size, true);
		
		// notify state
		System.out.println("Clearing the output file...");
		
		// clear the old file
		if (original_matrix_size != 10) FileManipulator.clearOutputFile(outputFile);
		
		// notify state
		System.out.println("Printing the original matrix...");
		
		// print the original matrix to latex
		heading = new String();
		heading += "%% Generated by My Matrix program\n";
		heading += "\\documentclass[english]{article}\n";
		heading += "\\usepackage[T1]{fontenc}\n";
		heading += "\\usepackage[latin9]{inputenc}\n";
		heading += "\\usepackage{babel}\n\n";
		heading += "\\begin{document}\n";
	    
		if (original_matrix_size != 10) {
			FileManipulator.toFile(outputFile, heading, false);
			FileManipulator.toFile(outputFile, MatrixToLatex(originalMatrix, original_matrix_size).toString(), true);
			FileManipulator.toFile(outputFile, "\n\n", false);
		}
		
		// notify state
		System.out.println("Solving the original matrix...working");
		
		// actually do the work and solve the original matrix
		coeffList = new ArrayList<Integer>();
		detPart1 = new StringBuffer();
		detPart2 = new StringBuffer();
		determinant(originalMatrix, original_matrix_size, -1);
		
		// notify state
		System.out.println("Printed the answer.");
		System.out.println("The result is located in directory " + System.getProperty("user.dir"));
		
		// end the latex document
		if (original_matrix_size != 10) FileManipulator.toFile(outputFile, "\n\n\\end{document}\n", false);
		
		// notify state
		System.out.println("Complete.");
	}
	
	/*
	 * Converts a Matrix to latex format.
	 * @param mat the matrix to convert to latex
	 * @param mat_size the size of the matrix
	 */
	public StringBuffer MatrixToLatex(ArrayList<Integer> mat, int mat_size) {
		StringBuffer latex = new StringBuffer();
		
		// start matrix
		latex.append("$\\left(\\begin{array}{");
		for (int c = 0; c < mat_size; c++) latex.append("c");
		latex.append("}\n");
	
		// create rows
		int count = 0;
		for (int index : mat) {
			if (count < mat_size - 1) latex.append("a_{" + index + "} & ");
        	else latex.append("a_{" + index + "}\\\\\n");
			
			count++;
			if (count == mat_size) count = 0;
		}
		
		// end matrix
		latex.append("\\end{array}\\right)$");
		
		return latex;
	}
	
	/**
	 * Entry point into the program.
	 * @param args arguments passed from the command line
	 */
	public static void main(String[] args) {
		// gather commandline arguments
		int passed_matrix_size;
		if (args.length > 0) passed_matrix_size = Integer.parseInt(args[0]);
		else passed_matrix_size = 0;
		
		// begin
		new Main(passed_matrix_size);
	}
	
	/**
	 * Generate a new matrix of the size passed.
	 * @param mat_size size the matrix that needs to be created
	 * @param sequential generates the matrix indexes sequentially if true, otherwise uses zeros
	 * @return the matrix created
	 */
	ArrayList<Integer> generateMatrix(int mat_size, boolean sequential) {
		// try to buffer some memory beforehand
		ArrayList<Integer> genMat = new ArrayList<Integer>();
		genMat.ensureCapacity(mat_size);
		
		// add the elements
		for (int i = 0; i < mat_size * mat_size; i++) genMat.add(0);
		for (int i = 0; i < mat_size; i++) { // for each row
			for (int j = 0; j < mat_size; j++) { // every column
				if (sequential) put(genMat, i, j, mat_size, Integer.parseInt((i+1) + "" + (j+1)));
				else put(genMat, i, j, mat_size, 0);
				//DEBUG: System.out.println(i + " " + j + " " + Integer.parseInt((i+1) + "" + (j+1)));
			}
		}
		return genMat;
	}
	
	/**
	 * This function gets the subscript of the variable at a particular location.
	 * @param mat the matrix you want to look data up on
	 * @param row the row to look at data on
	 * @param column the column to look at data on
	 * @return the value of the variable at a particular index in the matrix
	 */
	int get(ArrayList<Integer> mat, int row, int column, int matrix_size) {
	    return mat.get(column + (matrix_size * row));
	}
	
	/**
	 * This function sets the subscript of the variable at a particular location.
	 * @param mat the matrix you want to look data up on
	 * @param row the row to look at data on
	 * @param column the column to look at data on
	 * @param matrix_size the size of the matrix
	 * @param newSubscript the index of the variable that will be put in the location passed
	 */
	void put(ArrayList<Integer> mat, int row, int column, int matrix_size, int newSubscript) {
	    mat.set(column + (matrix_size * row), newSubscript);
	}
	
	/**
	 * Finds the determinant using expansion by minors & recursion
	 * @param theMatrix the matrix that you want to find the determinant on
	 * @param matrix_size represents the number of rows/columns in the matrix
	 * @param the position of this matrix in the internal for loop
	 * @return the determinant as a latex string
	 */
	StringBuffer determinant(ArrayList<Integer> mat, int matrix_size, int matrix_position) {
	    StringBuffer determinant = new StringBuffer();

	    // find the determinant of the matrix...
	    if (matrix_size == 2) { // special case
	    	// minus sign counter
	    	int minusCounter = 0;
	    	
	    	// determine coefficients <--(note the s)
	    	detPart1.setLength(0);
	    	detPart2.setLength(0);
	    	for (int acoeff : coeffList) {
	    		detPart1.append("$a_{" + Math.abs(acoeff) + "}$");
	    		detPart2.append("$a_{" + Math.abs(acoeff) + "}$");
	    		if (acoeff < 0) minusCounter++;
	    	}
	    	//DEBUG: System.out.println("Minus Count: " + minusCounter);
	    	
	    	// determine sign
	    	boolean isPlusMinusScheme = (Math.pow(-1.0, matrix_position) == 1) ? true : false; // would be normally because of position
	    	if (minusCounter % 2 == 1) isPlusMinusScheme = !isPlusMinusScheme; // extra negative so change scheme
	    	
	    	char firstSign = '+';
    		char secondSign = '-';
	    	if (isPlusMinusScheme == false) {
	    		firstSign = '-';
	    		secondSign = '+';
	    	}
	    	
	    	// remove the coefficient that generated this output
	    	coeffList.remove(coeffList.size() - 1); //DEBUG: Integer using = 
	    	//DEBUG: System.out.println("Using/Popping: " + using);
	    	
	    	// distribute coefficients & sign by padding the answer to the determinant
	        // (Note: need to get values from 00,01,10,11)
	    	determinant.append(firstSign);
	    	determinant.append(detPart1.toString());
	    	determinant.append("$a_{");
	    	determinant.append(get(mat, 0, 0, matrix_size));
	    	determinant.append("}$");
	    	determinant.append("$a_{");
	    	determinant.append(get(mat, 1, 1, matrix_size));
	    	determinant.append("}$");
	    	
	    	determinant.append(secondSign);
	    	determinant.append(detPart2.toString());
	    	determinant.append("$a_{");
	    	determinant.append(get(mat, 1, 0, matrix_size));
	    	determinant.append("}$");
	    	determinant.append("$a_{");
	    	determinant.append(get(mat, 0, 1, matrix_size));
	    	determinant.append("}$");
	        
	        return determinant;
	    } else { // otherwise do minors
	        // dynamically allocate new minor memory
	        ArrayList<Integer> nextMinor = generateMatrix(matrix_size - 1, false);

	        // for each minor ...
	        int cross_row = 0;
			int cross_column = 0;
			int map_row = 0;
			int map_column = 0;
			boolean adjusted = false;
	        for (int current_minor = 0; current_minor < matrix_size; current_minor++) {
	        	// lets do some cleaning up so the system won't run out of memory
	        	if (matrix_position == -1) {
	        		System.out.println("Attempting to free memory..." + current_minor);
	        		System.out.println("Saving partial result...");
	        		
	        		// save the partial sum (note: put in separate files if it is a 10x10 matrix)
	        		if (original_matrix_size == 10 && current_minor != 0) {
	        			FileManipulator.toFile(outputFile + current_minor, heading, false);
	        			FileManipulator.toFile(outputFile + current_minor, MatrixToLatex(originalMatrix, original_matrix_size).toString(), true);
	        			FileManipulator.toFile(outputFile + current_minor, determinant.toString(), false);
	        			FileManipulator.toFile(outputFile + current_minor, "\n\n", false);
	        			FileManipulator.toFile(outputFile + current_minor, "\n\n\\end{document}\n", false);
	        		} else if (original_matrix_size == 10) {
	        			// do nothing
	        		} else FileManipulator.toFile(outputFile, determinant.toString(), false);
	        		
	        		determinant.setLength(0);
	        		System.gc();
	        		System.out.println("Done...continuing onward...");
	        	}
	        	
	            // generate the minor
	        	map_row = 0;
	        	map_column = 0;
	            for (int i = 0; i < matrix_size; i++) { // for each row...
	                for (int j = 0; j < matrix_size; j++) { // for each column...
	                	// add to new matrix if not in cross by...
						if (i != cross_row && j != cross_column) {
							// putting value at this place into map place
							//DEBUG: System.out.print("(" + i + "," + j + ")" + "(" + map_row + "," + map_column + ")");
							//DEBUG: System.out.print(get(mat, i, j, matrix_size) + " ");
							//DEBUG: System.out.print(get(mat, map_row, map_column, matrix_size-1) + " ");
							put(nextMinor, map_row, map_column, matrix_size-1, get(mat, i, j, matrix_size));
							map_column++;
						} else if (i == cross_row && adjusted == false) {
							adjusted = true;
							map_row--;
						}
	                }
	                
	                if (map_row != matrix_size-1) map_row++;
	                
	                map_column = 0;
	                //DEBUG: System.out.println();
	            }
	            
	            adjusted = false;
	            //DEBUG: System.out.println("---");
                cross_row++;
                
                // push the minor's coefficient onto the stack/list /w the sign in tact
                if (current_minor % 2 == 1) {
                	coeffList.add(-1 * get(mat, current_minor, cross_column, matrix_size));
                	//DEBUG: System.out.println("Pushing: " + (-1 * get(mat, current_minor, cross_column, matrix_size)));
                } else {
                	coeffList.add(get(mat, current_minor, cross_column, matrix_size));
                	//DEBUG: System.out.println("Pushing: " + get(mat, current_minor, cross_column, matrix_size));
                }

	            // find determinant of the minor & append it to the final determinant answer
                // NOTE: I don't think matrix position is ever used
	            determinant.append(determinant(nextMinor, matrix_size-1, current_minor));
	        }
	        
	        // we are done with this minor, move on
	    }
	    
	    // one final print is necessary to complete the results
	    if (matrix_position == -1) {
	    	System.out.println("Saving final part of result..." + matrix_size);
	    	
	    	// do a special save for the 10x10 matrix case
	    	if (original_matrix_size == 10) {
    			FileManipulator.toFile(outputFile + '9', heading, false);
    			FileManipulator.toFile(outputFile + '9', MatrixToLatex(originalMatrix, original_matrix_size).toString(), true);
    			FileManipulator.toFile(outputFile + '9', determinant.toString(), false);
    			FileManipulator.toFile(outputFile + '9', "\n\n", false);
    			FileManipulator.toFile(outputFile + '9', "\n\n\\end{document}\n", false);
    		} else FileManipulator.toFile(outputFile, determinant.toString(), false);
	    	
    		determinant.setLength(0);
    		System.gc(); // make Java cleanup after itself
	    }
	    
	    // pop the minor's coefficient off the stack/list
	    if (coeffList.size() != 0) coeffList.remove(coeffList.size() - 1);
	    
	    // since the answer has been found, pad the answer to this
	    return determinant;
	}
} // Main
